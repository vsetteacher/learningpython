# merge one by one
import sys
class Solution:
    def mergeTwoLists(self,l1,l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        if (l1.val < l2.val):                
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
        else:
            l2.next = self.mergeTwoLists(l2.next, l1)
            return l2
            
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if len(lists) < 1: return None
        cur = ListNode(-sys.maxsize)
        for i in lists:
            cur = self.mergeTwoLists(cur,i)
        return cur.next   
##############################################################################################################
# brute force (go through all lists and create a new list then sort and create linked list based on its value)
class Solution:
    
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if len(lists) < 1: return None
        kList = []
        dummy = cur = ListNode(0)
        for i in lists:
            while i:
                kList.append(i.val)
                i = i.next
        kList.sort()
        for j in kList:
            cur.next = ListNode(j)
            cur = cur.next
            
        return dummy.next    
