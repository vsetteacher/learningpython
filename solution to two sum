class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        nums_len = len(nums)
        for i in range(nums_len):
            complement = target - nums[i]
            if complement in nums and nums.index(complement) != i: 
                return [i,nums.index(complement)]
         
 """trying to understand why dictionary is faster
    dictionary is like a hashtable"""
        
        
 class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums) <= 1:
            return False
        dictionary = {}
        nums_len = len(nums)
        for i in range(nums_len):
            complement = target - nums[i]
            if nums[i] in dictionary.keys() :
                return [dictionary[nums[i]],i]
            else:
                dictionary[complement] = i

        
