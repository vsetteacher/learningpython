# failed to pass oj due to memory limit
import itertools
class Solution:
    def combinationSum4(self, nums: 'List[int]', target: 'int') -> 'int':
        res = []
        tmp = set()
        if not nums: return 0
        nums.sort()
        for i in range(1,target//nums[0]+1):
            l = [list(x) for x in itertools.combinations_with_replacement(nums,i)]
            for j in l:
                if sum(j) == target:
                    res.append(j)
        for combination in res:
            k = [list(x) for x in itertools.permutations(combination)]
            for j in k:
                tmp.add(tuple(j))
        return len(tmp)
####################################################################################
#backtracking based on previous problem
 
class Solution:
    def combinationSum4(self, nums: 'List[int]', target: 'int') -> 'int':
        
        res = []
        nums.sort()
        self.dfs(nums, target, 0, [], res)
        return len(res)

    def dfs(self, nums, target, index, path, res):
        if target < 0:
            return  # backtracking
        if target == 0:
            res.append(path)
            return 
        for i in range(0, len(nums)):#since different sequence counts, start from first index every recursive
            self.dfs(nums, target-nums[i], i, path+[nums[i]], res)
            
####################################################################################
#dynamic programing

class Solution(object):
    def combinationSum4(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        dp = [0 for i in range(target+1)]
        dp[0] = 1
        nums.sort()
        for i in range(1, target+1):
            for num in nums:
                if num > i:break
                else:dp[i] += dp[i-num]
        return dp[target]
