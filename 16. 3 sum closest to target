# slow for larget list
import itertools
class Solution:
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        sumList = []
        sum = 0
        difference = 0
        
        for i in itertools.combinations(nums,3):
            sum = i[0]+i[1]+i[2]
            sumList.append(sum)
        for v in sumList:
            if abs(target - sum) > abs(target - v):
                sum = v
             
        return sum    
#############################two pointers#######
class Solution:
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        N = len(nums)
        result = nums[0]+nums[1]+nums[2]
        for i in range(N-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            s = i+1 #narrow down from two sides
            e = N-1
            while s<e:
                sum = nums[s]+nums[e]+nums[i]
                if sum == target:
                    return target
                    
                if abs(sum - target) < abs(result - target):
                    result = sum    
                if sum < target:
                    s += 1
                else:
                    e -= 1
        return result
