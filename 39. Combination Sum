import itertools


class Solution:
  
    def combinationSum(self, candidates: 'List[int]', target: 'int') -> 'List[List[int]]':
        
        result = []
        tmp = sorted(candidates)
        for i in range(1,target//tmp[0] + 1):
            l = list(itertools.combinations_with_replacement(tmp,i))
            for j in l:
                if sum(j) == target:
                    result.append(j)
        return result
##############################################################################################
#backtracking
def combinationSum(self, candidates, target):
    res = []
    candidates.sort()
    self.dfs(candidates, target, 0, [], res)
    return res
    
def dfs(self, nums, target, index, path, res):
    if target < 0:
        return  # backtracking
    if target == 0:
        res.append(path)
        return 
    for i in xrange(index, len(nums)):
        self.dfs(nums, target-nums[i], i, path+[nums[i]], res)
