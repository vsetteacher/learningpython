#brute force
class Solution:
    global isPalindrome
    
    def isPalindrome(s):
        if len(s)<1:
            return False
        return s == s[::-1]
            
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        maxlen = ''
        
        for i in range(len(s)):
            temp = ''
            for j in range(i,len(s)):
                temp += s[j]
                if isPalindrome(temp)==True and len(maxlen)<= len(temp):
                    maxlen = temp
                    
        return (maxlen)   
###################################################################################

#dynamic programming

class Solution:
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
      
        
        maxLength = 1
  
        start = 0
        length = len(s) 
  
        low = 0
        high = 0
  
    # One by one consider every character as center point of  
    # even and length palindromes 
        for i in range(len(s)):
        # Find the longest even length palindrome with center 
    # points as i-1 and i. 
            low = i - 1
            high = i 
            while low >= 0 and high < length and s[low] == s[high]: 
                if high - low + 1 > maxLength: 
                    start = low 
                    maxLength = high - low + 1
                low -= 1
                high += 1
  
        # Find the longest odd length palindrome with center  
        # point as i 
            low = i - 1
            high = i + 1
            while low >= 0 and high < length and s[low] == s[high]: 
                if high - low + 1 > maxLength: 
                    start = low 
                    maxLength = high - low + 1
                low -= 1
                high += 1
  
        return s[start:start+maxLength]
