class Solution:
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.+
        :algorithm : 
        : 1.Find the highest index i such that s[i] < s[i+1]. If no such index exists, the permutation is the last permutation. 
          2.Find the highest index j > i such that s[j] > s[i]. Such a j must exist, since i+1 is such an index.
          3.Swap s[i] with s[j].
          4.Reverse the order of all of the elements after index i till the last element.
        """
        i = len(nums) - 1
        while (i > 0 and nums[i - 1] >= nums[i]):
            i -= 1
    

        if (i <= 0):
            nums[:] = nums[::-1]
            return
    

        j = len(nums)- 1;

        while (nums[j] <= nums[i - 1]):
            j -= 1

        temp = nums[i - 1];
        nums[i - 1] = nums[j];
        nums[j] = temp;

        j = len(nums) - 1;

        while (i < j):
            temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i += 1
            j -= 1
